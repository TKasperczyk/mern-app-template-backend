const path = require('path');
const testH = require('./helpers');
const config = require('../app/config');

describe('config', () => {
    const configJsonMock = JSON.parse(testH.fileMocks.config.basic());
    const configAltJsonMock = JSON.parse(testH.fileMocks.config.alt());

    it('should import the configuration', () => {
        //We're assuming that the imported configuration is generated by our mock in ./helpers/fileMocks.config.basic
        expect(config.jwtKey).toBeTruthy();
        expect(config.jwtKey).toEqual(configJsonMock.jwtKey);
    });
    it('should reload the configuration', () => {
        testH.fn.upsertFsMockFiles({
            [path.resolve(__dirname, '../config/config.json')]: JSON.stringify(configAltJsonMock) //We need it as string
        });
        expect(config._reload).not.toThrow();
        expect(config.jwtKey).toBeTruthy();
        expect(config.jwtKey).toEqual(configAltJsonMock.jwtKey);
        expect(config.jwtKey).not.toEqual(configJsonMock.jwtKey);
    });
    it('should fail to reload the configuration when it\'s malformed and perserve the old config', () => {
        testH.fn.upsertFsMockFiles({
            [path.resolve(__dirname, '../config/config.json')]: testH.fileMocks.config.malformed()
        });
        expect(config._reload).toThrow('while parsing');
        expect(config.jwtKey).toEqual(configAltJsonMock.jwtKey);
    });
    it('should fail to reload the configuration when it\'s not found and perserve the old config', () => {
        testH.fn.upsertFsMockFiles({
            [path.resolve(__dirname, '../config/config.json')]: undefined
        });
        expect(config._reload).toThrow('not found');
        expect(config.jwtKey).toEqual(configAltJsonMock.jwtKey);
    });
});